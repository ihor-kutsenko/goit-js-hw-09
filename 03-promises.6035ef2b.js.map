{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAA6BC,GAC3BA,EAAMC,iBAoBL,IAlBD,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCO,EAAQC,OAAOJ,EAAWK,OAC1BC,EAAOF,OAAOH,EAAUI,OACxBE,EAASH,OAAOF,EAAYG,OAI5BG,EAAe,CACnB,CACEL,MAAOA,EACPM,SAAU,IAKJC,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAAG,CACnC,IAAMC,EAAeH,EAAaE,EAAI,GAAGP,MAAQG,EACjDE,EAAaI,KAAK,CAAET,MAAOQ,EAAcF,SAAUC,EAAI,G,CAGxCF,EAAaK,KAAI,SAACC,GACjC,OAQJ,SAAuBL,EAAUN,GAE/B,OAAO,IAAIY,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACNF,EAAQ,uBAAwCM,OAAfb,EAAS,QAAYa,OAANnB,EAAM,OAEpDc,EAAK,sBAAqCK,OAAfb,EAAS,QAAYa,OAANnB,EAAM,M,GAE/CA,E,IAnBIoB,CAAcT,EAAIL,SAAUK,EAAIX,OACtCqB,MAAK,SAACC,GAAeC,EAAAjC,GAASkC,OAAOC,QAAQH,E,IAC7CI,OAAM,SAACC,GAAgBJ,EAAAjC,GAASkC,OAAOI,QAAQD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', createChangePromise);\n\nfunction createChangePromise(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  \n\n  const arrayPromise = [\n    {\n      delay: delay,\n      position: 1\n    }\n  ];\n\n\n   for (let i = 1; i < amount; i += 1) {\n    const currentDelay = arrayPromise[i - 1].delay + step;\n    arrayPromise.push({ delay: currentDelay, position: i + 1 });\n  }\n\n  const promises = arrayPromise.map((arr) => {\n    return createPromise(arr.position, arr.delay)\n    .then((messageOk) => {Notiflix.Notify.success(messageOk)})\n    .catch((messageErr) => {Notiflix.Notify.warning(messageErr)})\n  });\n\n};\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n    resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    reject(`❌ Rejected promise ${position} in ${delay}ms`)\n  }\n    }, delay)\n  })\n  \n  \n};\n"],"names":["$6JpON","parcelRequire","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay","Number","value","step","amount","arrayPromise","position","i","currentDelay","push","map","arr","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","$ce04d3a99e08e73b$var$createPromise","then","messageOk","$parcel$interopDefault","Notify","success","catch","messageErr","warning"],"version":3,"file":"03-promises.6035ef2b.js.map"}